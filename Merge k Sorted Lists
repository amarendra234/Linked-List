/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
       ListNode* head=new ListNode(-1);
        ListNode* pre=head;
        priority_queue<pair<int,ListNode*>,vector<pair<int,ListNode*>>,greater<pair<int,ListNode*>>>pq;
        for(int i=0;i<lists.size();i++){
            if(lists[i]!=NULL){
                
                pq.push({lists[i]->val,lists[i]});
            }
        }
        while(pq.size()>0){
            int val=pq.top().first;
            ListNode* node=pq.top().second;
            pq.pop();
            if(node->next!=NULL){
                pq.push({node->next->val,node->next});
            }
            ListNode* temp=new ListNode(val);
            pre->next=temp;
            pre=pre->next;
        }
        return head->next;
    }
};
