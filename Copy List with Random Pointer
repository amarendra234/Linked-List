/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        unordered_map<Node*,Node*>umap;
        Node* curr=head;
        Node* deepCopy=NULL;
        Node* pre=NULL;
        while(curr!=NULL){
            Node* temp=new Node(curr->val);
            if(deepCopy==NULL){
                deepCopy=temp;
                pre=temp;
            }else{
                pre->next=temp;
                pre=pre->next;
            }
            umap[curr]=temp;
            curr=curr->next;
        }
        Node* t=deepCopy;
        curr=head;
        while(curr!=NULL){
            if(curr->random==NULL){
                t->random=NULL;
            }else{
                t->random=umap[curr->random];
            }
            t=t->next;
            curr=curr->next;
        }
        return deepCopy;
    }
};
