/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<ListNode*,ListNode*> findMid(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* pre=head;
        while(fast!=NULL and fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
            if(fast!=NULL and fast->next!=NULL){
                pre=slow;
            }
        }
        return {pre,slow};
    }
    TreeNode* sortedListToBST(ListNode* head) {
         if(head==NULL){
            return NULL;
         }
         if(head->next==NULL){
            TreeNode* h=new TreeNode(head->val);
            return h;
         }
         pair<ListNode*,ListNode*>p=findMid(head);
         ListNode* pre=p.first;
         ListNode* mid=p.second;
         pre->next=NULL;
         TreeNode* root=new TreeNode(mid->val);
         root->left=sortedListToBST(head);
         root->right=sortedListToBST(mid->next);
         return root;
    }
};
