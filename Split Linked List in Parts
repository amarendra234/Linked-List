/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int findLength(ListNode* head){
        int count=0;
        ListNode* temp=head;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }

        return count;
    }
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int len=findLength(head);
        vector<ListNode*>list;
        if(k>=len){
            ListNode* curr=head;
            ListNode* nextPointer;
            while(k>0){
                if(curr!=NULL and curr->next!=NULL){
                    nextPointer=curr->next;
                    curr->next=NULL;
                    list.push_back(curr);
                    curr=nextPointer;
                }else{
                    list.push_back(curr);
                    curr=NULL;
                }
              k--;
            }
        }else{
            int rem=len%k;
            int no_of_node=len/k;
            ListNode* curr=head;
            ListNode* last=curr;
            while(k>0){
                int count=1;
                while(count<no_of_node and last!=NULL){
                    last=last->next;
                    count++;
                }
                if(rem>0){
                    if(last->next!=NULL){
                        last=last->next;
                    }
                    rem--;
                }
                ListNode* temp=NULL;
                if(last->next!=NULL){
                     temp=last->next;
                }
                last->next=NULL;
                list.push_back(curr);
                curr=temp;
                last=curr;
                k--;
            }
        }
       return list;
    }
};
