/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* ReverseNode(ListNode* head){
        if(head==NULL or head->next==NULL){
            return head;
        }
        ListNode* newHead=ReverseNode(head->next);
        head->next->next=head;
        head->next=NULL;
        return newHead;
    }
    ListNode* find_mid(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL and fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
    int pairSum(ListNode* head) {
        ListNode* mid=find_mid(head);
        ListNode* newHead=ReverseNode(mid);
        ListNode* start=head;
        int ans=INT_MIN;
        while(newHead!=NULL){
            int sum=start->val+newHead->val;
            ans=max(ans,sum);
            start=start->next;
            newHead=newHead->next;
        }
        return ans;
    }
};
